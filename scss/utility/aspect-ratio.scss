/*
  from https://www.bram.us/2020/11/30/native-aspect-ratio-boxes-in-css-thanks-to-aspect-ratio/
  aspect-ratio css property, with fall-back when not supported

  Example:
    in scss
      $webtools-aspect-ratio-name: webtools-slide-aspect-ratio;
      $webtools-aspect-ratio-value: calc(512/204);
      @import "../../../../common/dev/css/utility/webtools-aspect-ratio.scss";
    creates a class .webtools-slide-aspect-ratio with aspect-ration=512/204
    including a fall-back to work on IE11
*/

/*
    Fall back described in
      https://www.ice-dev.com/decoupe-html-css/sass-lecon-5-les-conditions-et-les-boucles
    does not work.

    This is why another fallback is used
    It is less precise, but still ok
*/

// these variables are only there for the fallback
//     $webtools-aspect-ratio-limit-*  corresponds to the media query when the width of the element is modified
//     $webtools-aspect-ratio-width-*  corresponds to the size of the element, in vw
$webtools-aspect-ratio-limit-1: 0 !default;
$webtools-aspect-ratio-limit-2: 0 !default;

$webtools-aspect-ratio-width-0: 100 !default;   // 100 corresponds to 100vw
$webtools-aspect-ratio-width-1: 100 !default;
$webtools-aspect-ratio-width-2: 100 !default;

.#{$webtools-aspect-ratio-name} {
  height:calc($webtools-aspect-ratio-width-0 / $webtools-aspect-ratio-value) + 0vw; // https://stackoverflow.com/questions/13905407/append-unit-type-to-the-result-of-a-calculation-in-sass
  max-height:calc($webtools-max-width * ($webtools-aspect-ratio-width-0 / 100) / $webtools-aspect-ratio-value);
}

@if $webtools-aspect-ratio-limit-1 != 0 {
  @media only screen and (min-width: $webtools-aspect-ratio-limit-1) {
    .#{$webtools-aspect-ratio-name} {
      height:calc($webtools-aspect-ratio-width-1 / $webtools-aspect-ratio-value) + 0vw;
      max-height:calc($webtools-max-width * ($webtools-aspect-ratio-width-1 / 100) / $webtools-aspect-ratio-value);
    }
  }
}

@if $webtools-aspect-ratio-limit-2 != 0 {
  @media only screen and (min-width: $webtools-aspect-ratio-limit-2) {
    .#{$webtools-aspect-ratio-name} {
      height:calc($webtools-aspect-ratio-width-2 / $webtools-aspect-ratio-value) + 0vw;
      max-height:calc($webtools-max-width * ($webtools-aspect-ratio-width-2 / 100) / $webtools-aspect-ratio-value);
    }
  }
}

// do not use the fallback above when aspect-ratio is supported
@supports (aspect-ratio: 16 / 9) {
  .#{$webtools-aspect-ratio-name} {
    height: unset;
    max-height: unset;
    aspect-ratio: $webtools-aspect-ratio-value;   // use aspect-ratio property if supported by the browser
  }
};
